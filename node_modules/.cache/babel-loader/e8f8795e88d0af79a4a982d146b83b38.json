{"ast":null,"code":"import _slicedToArray from \"/Users/Tanattha/Downloads/1psge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Tanattha/Downloads/1psge/src/Exercise.js\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { Form } from \"react-final-form\";\nimport { TextField } from \"@material-ui/core\";\nimport composeValidators from \"./composeValidators\";\nimport { useDispatch } from \"react-redux\";\nimport { addToList, clearList } from \"./actions/formActions\";\nimport store from \"./store\";\n\nfunction Exercise() {\n  var dispatch = useDispatch();\n\n  var handleSubmit = () => {\n    var user = {\n      name: name,\n      email: email\n    };\n    dispatch(addToList(user));\n    setName(\"\");\n    setEmail(\"\");\n  }; // const removeList = (e) => {\n  //   e.preventDefault();\n  //   const userList = store.getState().form.userList;\n  //   dispatch(clearList(userList))\n  // }\n\n\n  var onSubmit = values => {\n    //await sleep(300)\n    window.alert(JSON.stringify(values, 0, 2));\n  };\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      name = _React$useState2[0],\n      setName = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      email = _React$useState4[0],\n      setEmail = _React$useState4[1];\n\n  var userList = store.getState().form.userList;\n\n  var required = value => value ? undefined : \"Required\";\n\n  var mustBeEmail = value => isNaN(value) ? \"Invalid Email\" : undefined;\n\n  return (\n    /*#__PURE__*/\n    // <Grid container spacing={3}>\n    //   <Grid item xs={6}>\n    //     <Form\n    //       //onSubmit={onSubmit}\n    //       onSubmit={handleSubmit}\n    //       render={({ form, handleSubmit, meta, values }) => {\n    //         return (\n    //           <form onSubmit={handleSubmit} noValidate>\n    //             <Card>\n    //               <CardHeader title=\"Form\" />\n    //               <CardContent>test</CardContent>\n    //               <CardActions>\n    //                 <TextField name=\"firstName\" validate={required}></TextField>\n    //                 <TextField\n    //                   id=\"outlined-basic\"\n    //                   value={name}\n    //                   label=\"Name\"\n    //                   onChange={(e) => setName(e.target.value)}\n    //                   name=\"name\"\n    //                   type=\"text\"\n    //                   variant=\"outlined\"\n    //                   validate={required}\n    //                 />\n    //                 {meta.error && <span>{meta.error}</span>}\n    //                 <TextField\n    //                   id=\"outlined-basic\"\n    //                   value={email}\n    //                   label=\"Email\"\n    //                   onChange={(e) => setEmail(e.target.value)}\n    //                   name=\"email\"\n    //                   type=\"email\"\n    //                   required=\"true\"\n    //                   variant=\"outlined\"\n    //                   validate={composeValidators(required)}\n    //                 />\n    //                 <div className=\"buttons\">\n    //                   <button type=\"submit\" disabled={submitting}>\n    //                     Submit\n    //                   </button>\n    //                   <button\n    //                     type=\"button\"\n    //                     onClick={form.reset}\n    //                     disabled={submitting || pristine}\n    //                   >\n    //                     Reset\n    //                   </button>\n    //                 </div>\n    //                 <pre>{JSON.stringify(values, 0, 2)}</pre>\n    //               </CardActions>\n    //             </Card>\n    //           </form>\n    //         );\n    //       }}\n    //     />\n    //   </Grid>\n    //   <Grid item xs={6}>\n    //     <Card>\n    //       <CardHeader title=\"Submitted Form\" />\n    //       <CardContent>\n    //         {userList.map((obj, index) => (\n    //           <div key={index}>\n    //             <br />\n    //             <Typography>\n    //               <strong>Full Name: {obj.name}</strong>\n    //             </Typography>\n    //             <Typography>\n    //               <strong>Email: {obj.email}</strong>\n    //             </Typography>\n    //           </div>\n    //         ))}\n    //       </CardContent>\n    //     </Card>\n    //   </Grid>\n    // </Grid>\n    React.createElement(Form, {\n      onSubmit: onSubmit,\n      render: ({\n        handleSubmit,\n        form,\n        submitting,\n        pristine,\n        values\n      }) => /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        name: \"firstName\",\n        validate: required,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }\n      }, ({\n        input,\n        meta\n      }) => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }\n      }, \"First Name\"), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        type: \"text\",\n        placeholder: \"First Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }\n      })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 46\n        }\n      }, meta.error))), /*#__PURE__*/React.createElement(TextField, {\n        name: \"age\",\n        validate: composeValidators(required, mustBeNumber, minValue(18)),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }\n      }, ({\n        input,\n        meta\n      }) => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }\n      }, \"Age\"), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        type: \"text\",\n        placeholder: \"Age\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }\n      })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 46\n        }\n      }, meta.error))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"buttons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        disabled: submitting,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }, \"Submit\"), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: form.reset,\n        disabled: submitting || pristine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }\n      }, \"Reset\")), /*#__PURE__*/React.createElement(\"pre\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }, JSON.stringify(values, 0, 2))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }\n    })\n  );\n}\n\nexport default Exercise;","map":{"version":3,"sources":["/Users/Tanattha/Downloads/1psge/src/Exercise.js"],"names":["React","Card","CardHeader","CardContent","CardActions","Grid","Typography","Button","Form","TextField","composeValidators","useDispatch","addToList","clearList","store","Exercise","dispatch","handleSubmit","user","name","email","setName","setEmail","onSubmit","values","window","alert","JSON","stringify","useState","userList","getState","form","required","value","undefined","mustBeEmail","isNaN","submitting","pristine","input","meta","error","touched","mustBeNumber","minValue","reset"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,uBAArC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AACA,SAASC,QAAT,GAAoB;AAClB,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AACA,MAAMM,YAAY,GAAG,MAAM;AACzB,QAAMC,IAAI,GAAG;AACXC,MAAAA,IAAI,EAAEA,IADK;AAEXC,MAAAA,KAAK,EAAEA;AAFI,KAAb;AAIAJ,IAAAA,QAAQ,CAACJ,SAAS,CAACM,IAAD,CAAV,CAAR;AACAG,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GARD,CAFkB,CAYlB;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAC3B;AACAC,IAAAA,MAAM,CAACC,KAAP,CAAaC,IAAI,CAACC,SAAL,CAAeJ,MAAf,EAAuB,CAAvB,EAA0B,CAA1B,CAAb;AACD,GAHD;;AAlBkB,wBAuBMxB,KAAK,CAAC6B,QAAN,CAAe,EAAf,CAvBN;AAAA;AAAA,MAuBXV,IAvBW;AAAA,MAuBLE,OAvBK;;AAAA,yBAwBQrB,KAAK,CAAC6B,QAAN,CAAe,EAAf,CAxBR;AAAA;AAAA,MAwBXT,KAxBW;AAAA,MAwBJE,QAxBI;;AAyBlB,MAAMQ,QAAQ,GAAGhB,KAAK,CAACiB,QAAN,GAAiBC,IAAjB,CAAsBF,QAAvC;;AACA,MAAMG,QAAQ,GAAIC,KAAD,IAAYA,KAAK,GAAGC,SAAH,GAAe,UAAjD;;AACA,MAAMC,WAAW,GAAIF,KAAD,IAAYG,KAAK,CAACH,KAAD,CAAL,GAAe,eAAf,GAAiCC,SAAjE;;AAEA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAC,IAAD;AACA,MAAA,QAAQ,EAAEZ,QADV;AAEA,MAAA,MAAM,EAAE,CAAC;AAAEN,QAAAA,YAAF;AAAgBe,QAAAA,IAAhB;AAAsBM,QAAAA,UAAtB;AAAkCC,QAAAA,QAAlC;AAA4Cf,QAAAA;AAA5C,OAAD,kBACN;AAAM,QAAA,QAAQ,EAAEP,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,IAAI,EAAC,WAAhB;AAA4B,QAAA,QAAQ,EAAEgB,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAAC;AAAEO,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,+CAAWD,KAAX;AAAkB,QAAA,IAAI,EAAC,MAAvB;AAA8B,QAAA,WAAW,EAAC,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGGC,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,OAAnB,iBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOF,IAAI,CAACC,KAAZ,CAHjC,CAFJ,CADF,eAWE,oBAAC,SAAD;AACE,QAAA,IAAI,EAAC,KADP;AAEE,QAAA,QAAQ,EAAEhC,iBAAiB,CAACuB,QAAD,EAAWW,YAAX,EAAyBC,QAAQ,CAAC,EAAD,CAAjC,CAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,CAAC;AAAEL,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,+CAAWD,KAAX;AAAkB,QAAA,IAAI,EAAC,MAAvB;AAA8B,QAAA,WAAW,EAAC,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGGC,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,OAAnB,iBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOF,IAAI,CAACC,KAAZ,CAHjC,CALJ,CAXF,eAuBE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,QAAQ,EAAEJ,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,OAAO,EAAEN,IAAI,CAACc,KAFhB;AAGE,QAAA,QAAQ,EAAER,UAAU,IAAIC,QAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJF,CAvBF,eAmCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMZ,IAAI,CAACC,SAAL,CAAeJ,MAAf,EAAuB,CAAvB,EAA0B,CAA1B,CAAN,CAnCF,CAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5EF;AAuHD;;AAED,eAAeT,QAAf","sourcesContent":["import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Form } from \"react-final-form\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport composeValidators from \"./composeValidators\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addToList, clearList } from \"./actions/formActions\";\r\nimport store from \"./store\";\r\nfunction Exercise() {\r\n  const dispatch = useDispatch();\r\n  const handleSubmit = () => {\r\n    const user = {\r\n      name: name,\r\n      email: email,\r\n    };\r\n    dispatch(addToList(user));\r\n    setName(\"\");\r\n    setEmail(\"\");\r\n  };\r\n\r\n  // const removeList = (e) => {\r\n  //   e.preventDefault();\r\n  //   const userList = store.getState().form.userList;\r\n  //   dispatch(clearList(userList))\r\n  // }\r\n\r\n  const onSubmit = (values) => {\r\n    //await sleep(300)\r\n    window.alert(JSON.stringify(values, 0, 2));\r\n  };\r\n\r\n  const [name, setName] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const userList = store.getState().form.userList;\r\n  const required = (value) => (value ? undefined : \"Required\");\r\n  const mustBeEmail = (value) => (isNaN(value) ? \"Invalid Email\" : undefined);\r\n\r\n  return (\r\n    // <Grid container spacing={3}>\r\n    //   <Grid item xs={6}>\r\n    //     <Form\r\n    //       //onSubmit={onSubmit}\r\n    //       onSubmit={handleSubmit}\r\n    //       render={({ form, handleSubmit, meta, values }) => {\r\n    //         return (\r\n    //           <form onSubmit={handleSubmit} noValidate>\r\n    //             <Card>\r\n    //               <CardHeader title=\"Form\" />\r\n    //               <CardContent>test</CardContent>\r\n    //               <CardActions>\r\n    //                 <TextField name=\"firstName\" validate={required}></TextField>\r\n    //                 <TextField\r\n    //                   id=\"outlined-basic\"\r\n    //                   value={name}\r\n    //                   label=\"Name\"\r\n    //                   onChange={(e) => setName(e.target.value)}\r\n    //                   name=\"name\"\r\n    //                   type=\"text\"\r\n    //                   variant=\"outlined\"\r\n    //                   validate={required}\r\n    //                 />\r\n    //                 {meta.error && <span>{meta.error}</span>}\r\n    //                 <TextField\r\n    //                   id=\"outlined-basic\"\r\n    //                   value={email}\r\n    //                   label=\"Email\"\r\n    //                   onChange={(e) => setEmail(e.target.value)}\r\n    //                   name=\"email\"\r\n    //                   type=\"email\"\r\n    //                   required=\"true\"\r\n    //                   variant=\"outlined\"\r\n    //                   validate={composeValidators(required)}\r\n    //                 />\r\n    //                 <div className=\"buttons\">\r\n    //                   <button type=\"submit\" disabled={submitting}>\r\n    //                     Submit\r\n    //                   </button>\r\n    //                   <button\r\n    //                     type=\"button\"\r\n    //                     onClick={form.reset}\r\n    //                     disabled={submitting || pristine}\r\n    //                   >\r\n    //                     Reset\r\n    //                   </button>\r\n    //                 </div>\r\n    //                 <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n    //               </CardActions>\r\n    //             </Card>\r\n    //           </form>\r\n    //         );\r\n    //       }}\r\n    //     />\r\n    //   </Grid>\r\n    //   <Grid item xs={6}>\r\n    //     <Card>\r\n    //       <CardHeader title=\"Submitted Form\" />\r\n\r\n    //       <CardContent>\r\n    //         {userList.map((obj, index) => (\r\n    //           <div key={index}>\r\n    //             <br />\r\n    //             <Typography>\r\n    //               <strong>Full Name: {obj.name}</strong>\r\n    //             </Typography>\r\n    //             <Typography>\r\n    //               <strong>Email: {obj.email}</strong>\r\n    //             </Typography>\r\n    //           </div>\r\n    //         ))}\r\n    //       </CardContent>\r\n    //     </Card>\r\n    //   </Grid>\r\n    // </Grid>\r\n    <Form\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n      <form onSubmit={handleSubmit}>\r\n        <TextField name=\"firstName\" validate={required}>\r\n          {({ input, meta }) => (\r\n            <div>\r\n              <label>First Name</label>\r\n              <input {...input} type=\"text\" placeholder=\"First Name\" />\r\n              {meta.error && meta.touched && <span>{meta.error}</span>}\r\n            </div>\r\n          )}\r\n        </TextField>\r\n       \r\n        <TextField\r\n          name=\"age\"\r\n          validate={composeValidators(required, mustBeNumber, minValue(18))}\r\n        >\r\n          {({ input, meta }) => (\r\n            <div>\r\n              <label>Age</label>\r\n              <input {...input} type=\"text\" placeholder=\"Age\" />\r\n              {meta.error && meta.touched && <span>{meta.error}</span>}\r\n            </div>\r\n          )}\r\n        </TextField>\r\n        <div className=\"buttons\">\r\n          <button type=\"submit\" disabled={submitting}>\r\n            Submit\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={form.reset}\r\n            disabled={submitting || pristine}\r\n          >\r\n            Reset\r\n          </button>\r\n        </div>\r\n        <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n      </form>\r\n    )}\r\n  />\r\n  );\r\n}\r\n\r\nexport default Exercise;\r\n"]},"metadata":{},"sourceType":"module"}